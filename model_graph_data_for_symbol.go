/*
Agridence API

Agridence

API version: v1.1
Contact: it@agridence.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package arp_sdk_go_v1

import (
	"encoding/json"
)

// checks if the GraphDataForSymbol type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GraphDataForSymbol{}

// GraphDataForSymbol struct for GraphDataForSymbol
type GraphDataForSymbol struct {
	Prices *map[string]map[string][]GraphDataForSymbolCategoryValueInner `json:"prices,omitempty"`
}

// NewGraphDataForSymbol instantiates a new GraphDataForSymbol object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGraphDataForSymbol() *GraphDataForSymbol {
	this := GraphDataForSymbol{}
	return &this
}

// NewGraphDataForSymbolWithDefaults instantiates a new GraphDataForSymbol object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGraphDataForSymbolWithDefaults() *GraphDataForSymbol {
	this := GraphDataForSymbol{}
	return &this
}

// GetPrices returns the Prices field value if set, zero value otherwise.
func (o *GraphDataForSymbol) GetPrices() map[string]map[string][]GraphDataForSymbolCategoryValueInner {
	if o == nil || IsNil(o.Prices) {
		var ret map[string]map[string][]GraphDataForSymbolCategoryValueInner
		return ret
	}
	return *o.Prices
}

// GetPricesOk returns a tuple with the Prices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphDataForSymbol) GetPricesOk() (*map[string]map[string][]GraphDataForSymbolCategoryValueInner, bool) {
	if o == nil || IsNil(o.Prices) {
		return nil, false
	}
	return o.Prices, true
}

// HasPrices returns a boolean if a field has been set.
func (o *GraphDataForSymbol) HasPrices() bool {
	if o != nil && !IsNil(o.Prices) {
		return true
	}

	return false
}

// SetPrices gets a reference to the given map[string]map[string][]GraphDataForSymbolCategoryValueInner and assigns it to the Prices field.
func (o *GraphDataForSymbol) SetPrices(v map[string]map[string][]GraphDataForSymbolCategoryValueInner) {
	o.Prices = &v
}

func (o GraphDataForSymbol) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GraphDataForSymbol) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Prices) {
		toSerialize["prices"] = o.Prices
	}
	return toSerialize, nil
}

type NullableGraphDataForSymbol struct {
	value *GraphDataForSymbol
	isSet bool
}

func (v NullableGraphDataForSymbol) Get() *GraphDataForSymbol {
	return v.value
}

func (v *NullableGraphDataForSymbol) Set(val *GraphDataForSymbol) {
	v.value = val
	v.isSet = true
}

func (v NullableGraphDataForSymbol) IsSet() bool {
	return v.isSet
}

func (v *NullableGraphDataForSymbol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGraphDataForSymbol(val *GraphDataForSymbol) *NullableGraphDataForSymbol {
	return &NullableGraphDataForSymbol{value: val, isSet: true}
}

func (v NullableGraphDataForSymbol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGraphDataForSymbol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


