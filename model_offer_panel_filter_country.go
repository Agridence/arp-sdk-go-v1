/*
Agridence API

Agridence

API version: v1
Contact: it@agridence.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package arp_sdk_go_v1

import (
	"encoding/json"
)

// checks if the OfferPanelFilterCountry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OfferPanelFilterCountry{}

// OfferPanelFilterCountry struct for OfferPanelFilterCountry
type OfferPanelFilterCountry struct {
	Code *string `json:"code,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewOfferPanelFilterCountry instantiates a new OfferPanelFilterCountry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOfferPanelFilterCountry() *OfferPanelFilterCountry {
	this := OfferPanelFilterCountry{}
	return &this
}

// NewOfferPanelFilterCountryWithDefaults instantiates a new OfferPanelFilterCountry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOfferPanelFilterCountryWithDefaults() *OfferPanelFilterCountry {
	this := OfferPanelFilterCountry{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *OfferPanelFilterCountry) GetCode() string {
	if o == nil || isNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferPanelFilterCountry) GetCodeOk() (*string, bool) {
	if o == nil || isNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *OfferPanelFilterCountry) HasCode() bool {
	if o != nil && !isNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *OfferPanelFilterCountry) SetCode(v string) {
	o.Code = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OfferPanelFilterCountry) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferPanelFilterCountry) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OfferPanelFilterCountry) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OfferPanelFilterCountry) SetName(v string) {
	o.Name = &v
}

func (o OfferPanelFilterCountry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OfferPanelFilterCountry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: code is readOnly
	// skip: name is readOnly
	return toSerialize, nil
}

type NullableOfferPanelFilterCountry struct {
	value *OfferPanelFilterCountry
	isSet bool
}

func (v NullableOfferPanelFilterCountry) Get() *OfferPanelFilterCountry {
	return v.value
}

func (v *NullableOfferPanelFilterCountry) Set(val *OfferPanelFilterCountry) {
	v.value = val
	v.isSet = true
}

func (v NullableOfferPanelFilterCountry) IsSet() bool {
	return v.isSet
}

func (v *NullableOfferPanelFilterCountry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOfferPanelFilterCountry(val *OfferPanelFilterCountry) *NullableOfferPanelFilterCountry {
	return &NullableOfferPanelFilterCountry{value: val, isSet: true}
}

func (v NullableOfferPanelFilterCountry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOfferPanelFilterCountry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


